
//      max-heap


    public class HeapSort
{
    public void sort(int arr[])
    {
        int n = arr.length;

        //Шаг 1. Построение кучи, представление на основе одномерного массива (перегруппируем массив)
       
        for (int i = n / 2 - 1; i >= 0; i--) //Сначала следует построить дерево из всех элементов массива,
        
        // не заботясь о соблюдении основного свойства кучи, а потом вызвать метод heapify для всех вершин,
        // у которых есть хотя бы один потомок (так как поддеревья, состоящие из одной вершины без потомков,
        // уже упорядочены). Потомки гарантированно есть у первых heapSize/2-1 вершин.

        //Шаг 2. Формируем первоночальное сортирущее дерево,  приоритет каждой вершины больше приоритетов её потомков.
            
        heapify(arr, n, i); 

        // Шаг 3. Один за другим извлекаем элементы из кучи 
        //На данном этапе самый большой элемент хранится в корне кучи. 
        //Замените его на последний элемент кучи, а затем уменьшите ее
        // размер на 1. 
        
        for (int i=n-1; i>=0; i--)
        {
            // Перемещаем текущий корень в конец
            int temp = arr[0];
            arr[0] = arr[i];
            arr[i] = temp;

            // Вызываем процедуру heapify на уменьшенной куче
            // Наконец, преобразуйте полученное дерево в max-heap с новым корнем.  
           
            heapify(arr, i, 0);
        }
    }

    // Процедура для преобразования в двоичную кучу поддерева с корневым узлом i, что является
// индексом в arr[]. n - размер кучи
     
void heapify(int arr[], int n, int i)
    {
        int largest = i; // Инициализируем наибольший элемент как корень/родитель
        int l = 2*i + 1; // левый потомок = 2*i + 1
        int r = 2*i + 2; // правый потомок = 2*i + 2

           // Если левый дочерний элемент больше корня
        if (l < n && arr[l] > arr[largest])
            largest = l;

          // Если правый дочерний элемент больше, чем самый большой элемент на данный момент
        if (r < n && arr[r] > arr[largest])
            largest = r;
       // Если самый большой элемент не корень
        if (largest != i)
        {
            int swap = arr[i];
            arr[i] = arr[largest];
            arr[largest] = swap;

          // Рекурсивно преобразуем в двоичную кучу затронутое поддерево
            heapify(arr, n, largest);
        }
    }

    /* Вспомогательная функция для вывода на экран массива размера n */
    static void printArray(int arr[])
    {
        int n = arr.length;
        for (int i=0; i<n; ++i)
            System.out.print(arr[i]+" ");
        System.out.println();
    }

    // Управляющая программа
    public static void main(String args[])
    {
        int arr[] = {12, 11, 13, 5, 6, 7};
        int n = arr.length;

        HeapSort ob = new HeapSort();
        ob.sort(arr);

        System.out.println("Sorted array is");
        printArray(arr);
    }
}
